// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const checkUserByEmail = `-- name: CheckUserByEmail :one
SELECT EXISTS(SELECT user_id, user_name, password, email, user_type, token, refresh_token, created_at, updated_at FROM users WHERE email = $1)
`

func (q *Queries) CheckUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, user_name, password, email, user_type, token, refresh_token, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateUserParams struct {
	UserID       string    `json:"user_id"`
	UserName     string    `json:"user_name"`
	Password     string    `json:"password"`
	Email        string    `json:"email"`
	UserType     string    `json:"user_type"`
	Token        string    `json:"token"`
	RefreshToken string    `json:"refresh_token"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.UserName,
		arg.Password,
		arg.Email,
		arg.UserType,
		arg.Token,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, user_name, password, email, user_type, token, refresh_token, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.Password,
			&i.Email,
			&i.UserType,
			&i.Token,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, password, email, user_type, token, refresh_token, created_at, updated_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.UserType,
		&i.Token,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
